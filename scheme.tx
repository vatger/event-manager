datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  MAIN_ADMIN
}

enum PermissionScope {
  OWN_FIR
  ALL
}

enum EventStatus {
  PLANNING
  SIGNUP_OPEN
  SIGNUP_CLOSED
  ROSTER_PUBLISHED
  DRAFT
  CANCELLED
}

enum DocumentType {
  PLAN
  BRIEFING
  CHART
  OTHER
}

enum NotificationType {
  INFO
  SYSTEM
  EVENT
  OTHER
}

model User {
  id        Int      @id @default(autoincrement())
  cid       Int      @unique
  name      String
  rating    String
  role      Role     @default(USER)
  firId     Int?
  fir       FIR?     @relation(fields: [firId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  signups      EventSignup[]
  Notification Notification[]
  groups       UserGroup[]
}

model FIR {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  name      String
  events    Event[]
  members   User[]
  groups    Group[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id              Int         @id @default(autoincrement())
  name            String
  description     String
  bannerUrl       String?
  startTime       DateTime
  endTime         DateTime
  airports        Json // Array of ICAO codes
  signupDeadline  DateTime?
  staffedStations Json? // Array of Callsigns
  status          EventStatus @default(PLANNING)
  rosterlink      String?
  createdById     Int?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  firId Int?
  fir   FIR? @relation(fields: [firId], references: [id])

  signups      EventSignup[]
  Notification Notification[]
}

model EventSignup {
  id                Int      @id @default(autoincrement())
  eventId           Int
  userCID           Int
  availability      Json
  breakrequests     String?
  preferredStations String?
  remarks           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userCID], references: [cid])

  @@unique([eventId, userCID]) // verhindert doppelte Signups
}

model Notification {
  id        Int              @id @default(autoincrement())
  userCID   Int
  eventId   Int?
  type      NotificationType
  title     String
  message   String
  data      Json?
  readAt    DateTime?
  createdAt DateTime         @default(now())

  user  User   @relation(fields: [userCID], references: [cid])
  event Event? @relation(fields: [eventId], references: [id])

  @@index([userCID, readAt])
  @@index([eventId])
}

model Permission {
  id          Int               @id @default(autoincrement())
  key         String            @unique // e.g. "event.create", "event.edit", "group.manage"
  description String?
  groups      GroupPermission[]
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  firId       Int? // null = global Gruppe
  fir         FIR?     @relation(fields: [firId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  permissions GroupPermission[]
  members     UserGroup[]

  @@unique([name, firId]) // gleicher Name pro FIR nur einmal
}

model GroupPermission {
  id           Int             @id @default(autoincrement())
  groupId      Int
  permissionId Int
  scope        PermissionScope @default(OWN_FIR)

  group      Group      @relation(fields: [groupId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([groupId, permissionId, scope])
}

model UserGroup {
  id      Int @id @default(autoincrement())
  userCID Int
  groupId Int

  user  User  @relation(fields: [userCID], references: [cid])
  group Group @relation(fields: [groupId], references: [id])

  @@unique([id, groupId])
}

// Training system caches
model TrainingEndorsementCache {
  id        Int      @id @default(autoincrement())
  userCID   Int
  position  String
  createdAt DateTime
  updatedAt DateTime
  fetchedAt DateTime @default(now())

  @@unique([userCID, position])
  @@index([userCID])
  @@index([fetchedAt])
}

model TrainingSoloCache {
  id        Int      @id @default(autoincrement())
  userCID   Int
  position  String
  expiry    DateTime
  createdAt DateTime
  updatedAt DateTime
  fetchedAt DateTime @default(now())

  @@unique([userCID, position])
  @@index([userCID])
  @@index([expiry])
}

model TrainingFamiliarizationCache {
  id         Int      @id @default(autoincrement())
  userCID    Int
  sectorName String
  sectorFir  String
  fetchedAt  DateTime @default(now())

  @@unique([userCID, sectorFir, sectorName])
  @@index([userCID])
  @@index([sectorFir])
}

model TrainingCacheMetadata {
  id          Int      @id @default(autoincrement())
  lastUpdated DateTime
  forceUpdate Boolean  @default(false)
}
